You are a full-stack developer.
Build me a **landing page website** with a **floating draggable chatbot widget**.
Theme: **Simple Marathi School Theme**¬†(like udemy for marathi school student )(soft colors like saffron, green, white; chalkboard style fonts; clean UI, looks like a school learning site).

## üéØ Project Requirements

### 1. Landing Page

* A simple hero section: "Marathi Vidyalaya ‚Äì Smart AI Tutor"
* Subtitle: "Ask your doubts in English, Hindi, or Marathi."
* A background with a chalkboard or school classroom style.
* Footer with "Built with AI".

### 2. Floating Chatbot Widget

* Small circular floating button (bottom-right) with a book/chatbot icon.
* Click ‚Üí expands into chat window (rounded card, glassmorphism look).
* Draggable across the screen.
* Close button to minimize.
* Should support both **Text input** and **Mic button** for voice queries.

### 3. Voice Features

* **STT (Speech-to-Text)**: Use browser **Web Speech API** (free, runs locally in Chrome/Edge).
* **TTS (Text-to-Speech)**: Use **Web Speech API SpeechSynthesis**, force it to use an **Indian female voice** (Google Hindi Female, Google UK English Female, or similar depending on language).
* On receiving response ‚Üí chatbot speaks the answer in selected language voice.

### 4. Language Selector

* Dropdown at top of chatbot: **English / Hindi / Marathi**.
* When selected:

  * Refresh conversation.
  * Greet student in that language with a fixed greeting:

    * English ‚Üí "Hello! I am your Tutor. How can I help you today?"
    * Hindi ‚Üí "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï ‡§π‡•Ç‡§Å‡•§ ‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡§ø‡§∏ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å?"
    * Marathi ‚Üí "‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! ‡§Æ‡•Ä ‡§§‡•Å‡§Æ‡§ö‡§æ ‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï ‡§Ü‡§π‡•á. ‡§Ü‡§ú ‡§Æ‡•Ä ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§≤‡§æ ‡§ï‡§∂‡•Ä ‡§Æ‡§¶‡§§ ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§‡•ã?"
  * From then onward ‚Üí all queries + answers must be in that selected language only.
  * The user should **not have to instruct the bot** to switch languages.

### 5. Chat Flow

Student (Voice/Text Input)
‚Üì
Floating Widget (JS draggable chat UI)
‚Üì
\[Speech-to-Text ‚Üí Web Speech API]
‚Üì
Text Query sent to Backend (Node.js/Express)
‚Üì
Backend calls **Gemini API**¬†(AIzaSyCdWkyLQkucGa4myFOIz7CQ0RmRJ6fjBIA) ("[https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash\:generateContent")¬†with](https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent%22%29¬†with) language context (prompt always enforces chosen language).
‚Üì
LLM generates Answer in chosen language.
‚Üì
Backend returns text.
‚Üì
Frontend displays message + uses SpeechSynthesis to speak in Indian female voice.

### 6. Backend (Node.js / Express)

* Simple `/chat` POST route:

  * Accepts `{ text, language }` from frontend.
  * Calls Gemini API (`gemini-pro` or `gemini-1.5-flash`) with system prompt:

    ```
    You are a friendly tutor. Always respond only in {{language}}. 
    The user is a student. Explain clearly and politely. 
    ```
  * Return `{"reply": "..."}`.

### 7. Hosting / Demo

* All in single Replit project.
* One-click run (Express server + static frontend).
* Frontend served from `/public/index.html`.
* Use free Gemini API key from environment variable `GEMINI_API_KEY`.

---

## üìÇ File Structure

* `index.js` ‚Üí Node.js backend with Express.
* `/public/index.html` ‚Üí Landing page + chatbot widget.
* `/public/chatbot.js` ‚Üí Chatbot widget logic (drag, expand, mic, STT, TTS, API call).
* `/public/style.css` ‚Üí Styles (school theme + chatbot UI).

---

## üöÄ Detailed Requirements for Files

### `index.js`

* Express server, serve static files from `/public`.
* Endpoint `POST /chat` ‚Üí calls Gemini API.
* Use `node-fetch` for API call.
* Add `dotenv` for `GEMINI_API_KEY`.

### `public/index.html`

* Marathi school theme landing page with hero text.
* Include floating chatbot (`<script src="chatbot.js"></script>`).
* Link stylesheet `style.css`.

### `public/chatbot.js`

* Floating draggable widget.
* Expand/collapse animation.
* Dropdown for language selection.
* Input box + mic button.
* Uses Web Speech API:

  * `SpeechRecognition` for STT.
  * `speechSynthesis` for TTS. Select female Indian voices.
* On language change ‚Üí greet in that language.
* On send (voice/text) ‚Üí call `/chat` with `{ text, language }`.
* Display both student & tutor messages in chat UI.

### `public/style.css`

* Theme: Chalkboard + classroom colors (green, orange, white).
* Rounded corners, shadows, soft transitions.
* Chat widget looks like a **speech bubble notebook**.

---

‚ö° Deliverable: A working Replit app that runs `node index.js` ‚Üí opens a landing page with Marathi school theme ‚Üí floating chatbot ‚Üí voice/text input/output ‚Üí Gemini API tutor answers in chosen language (English/Hindi/Marathi).
